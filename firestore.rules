rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isAdmin() {
      return isAuthenticated() && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    function isScanner() {
      return isAuthenticated() && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['admin', 'scanner'];
    }
    
    // Invitations - public read for scanner, admin write
    match /invitations/{invitation} {
      allow read: if true; // Public scanners need to read
      allow create: if isAdmin();
      allow update: if (request.resource.data.status == 'redeemed' &&
        resource.data.status == 'active' &&
        request.resource.data.keys().hasAll(['status', 'redeemedAt', 'redeemedBy'])) ||
        isAdmin(); // Allow admin updates or redeeming active invitations
      allow delete: if isAdmin(); // Allow admin deletion
    }
    
    // Batches - temporarily allow public read for debugging
    match /batches/{batch} {
      allow read: if true; // Temporarily allow public read
      allow write: if isAdmin();
    }
    
    // Users - self read, admin write
    match /users/{userId} {
      allow read: if isAuthenticated() && 
        (request.auth.uid == userId || isAdmin());
      allow write: if isAdmin();
    }
    
    // Scan logs - public write for scanner, public read for testing
    match /scanLogs/{log} {
      allow read: if true; // Temporarily allow public read for debugging
      allow create: if true; // Public scanners need to log
      allow update: if false; // Logs should not be updated
      allow delete: if isAdmin();
    }
    
    // Email campaigns - admin only
    match /emailCampaigns/{campaign} {
      allow read: if isAdmin();
      allow write: if isAdmin();
    }
    
    // Email queue - admin only
    match /emailQueue/{email} {
      allow read: if isAdmin();
      allow write: if isAdmin();
    }
  }
}