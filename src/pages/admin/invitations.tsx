import { useState, useEffect } from 'react';
import { useRouter } from 'next/router';
import { onAuthStateChanged } from 'firebase/auth';
import { auth } from '@/lib/firebase';
import AdminHeader from '@/components/AdminHeader';
import { InvitationManager, VNVNCInvitation } from '@/lib/invitation-manager';
import { QRGenerator } from '@/lib/qr-generator';
import Head from 'next/head';

export default function InvitationsManager() {
  const router = useRouter();
  const [isAuthenticated, setIsAuthenticated] = useState(false);
  const [loading, setLoading] = useState(true);
  const [invitations, setInvitations] = useState<VNVNCInvitation[]>([]);
  const [instagramInput, setInstagramInput] = useState('');
  const [batchName, setBatchName] = useState('');
  const [eventDate, setEventDate] = useState<'2025-08-29' | '2025-08-30' | 'both'>('both');
  const [invitationType, setInvitationType] = useState<'link' | 'qr'>('link');
  const [qrCount, setQrCount] = useState(10);
  const [processing, setProcessing] = useState(false);
  const [message, setMessage] = useState('');
  const [copiedId, setCopiedId] = useState<string | null>(null);
  const [generatingQR, setGeneratingQR] = useState<{ [key: string]: boolean }>({});
  const [qrProgress, setQrProgress] = useState(0);

  const manager = new InvitationManager();

  useEffect(() => {
    const unsubscribe = onAuthStateChanged(auth, (user) => {
      if (user) {
        setIsAuthenticated(true);
        loadInvitations();
      } else {
        router.push('/admin/login?redirect=/admin/invitations');
      }
      setLoading(false);
    });

    return () => unsubscribe();
  }, [router]);

  const loadInvitations = async () => {
    try {
      const invites = await manager.getAllInvitations();
      setInvitations(invites);
    } catch (error) {
      console.error('Error loading invitations:', error);
    }
  };

  const handleCreateBatch = async () => {
    if (invitationType === 'link') {
      // HTML Link invitations
      if (!instagramInput.trim() || !batchName.trim()) {
        setMessage('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è');
        return;
      }

      setProcessing(true);
      setMessage('');

      try {
        const handles = manager.parseInstagramHandles(instagramInput);
        
        if (handles.length === 0) {
          setMessage('–ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∞–ª–∏–¥–Ω—ã—Ö Instagram –∞–∫–∫–∞—É–Ω—Ç–æ–≤');
          setProcessing(false);
          return;
        }

        const newInvitations = await manager.createBatchInvitations(
          handles,
          batchName,
          eventDate,
          invitationType
        );

        setInvitations([...newInvitations, ...invitations]);
        setMessage(`–°–æ–∑–¥–∞–Ω–æ ${newInvitations.length} –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π`);
        setInstagramInput('');
        setBatchName('');
      } catch (error) {
        console.error('Error creating batch:', error);
        setMessage('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π');
      } finally {
        setProcessing(false);
      }
    } else {
      // QR Code invitations
      if (!batchName.trim()) {
        setMessage('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã');
        return;
      }

      setProcessing(true);
      setMessage('');
      setQrProgress(0);

      try {
        // First create invitations in Firebase
        const newInvitations: VNVNCInvitation[] = [];
        const codes: string[] = [];
        
        setMessage('–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
        
        for (let i = 0; i < qrCount; i++) {
          // Generate unique code
          const code = `VNVNC-2025-${Math.random().toString(36).substring(2, 8).toUpperCase()}`;
          codes.push(code);
          
          // Create invitation in Firebase with this code
          const invitation = await manager.createInvitationWithCode(
            code,
            'QR_CODE_USER',
            eventDate,
            batchName,
            'qr'
          );
          newInvitations.push(invitation);
        }

        setMessage('–ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR –∫–æ–¥–æ–≤...');
        
        // Now generate QR codes with the codes that exist in database
        const { zipBlob } = await QRGenerator.generateQRBatchFromCodes(
          codes,
          eventDate,
          batchName,
          (progress) => setQrProgress(progress)
        );

        setInvitations([...newInvitations, ...invitations]);

        // Download ZIP file
        QRGenerator.downloadQRZip(zipBlob, batchName);

        setMessage(`–°–æ–∑–¥–∞–Ω–æ ${qrCount} QR –∫–æ–¥–æ–≤ –∏ –∑–∞–≥—Ä—É–∂–µ–Ω ZIP –∞—Ä—Ö–∏–≤`);
        setBatchName('');
        setQrCount(10);
        setQrProgress(0);
      } catch (error) {
        console.error('Error creating QR batch:', error);
        setMessage('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è QR –∫–æ–¥–æ–≤');
      } finally {
        setProcessing(false);
        setQrProgress(0);
      }
    }
  };

  const downloadSingleQR = async (inv: VNVNCInvitation) => {
    setGeneratingQR({ ...generatingQR, [inv.id!]: true });
    try {
      await QRGenerator.downloadSingleQR(inv.inviteUrl, inv.code);
    } catch (error) {
      console.error('Error downloading QR:', error);
    } finally {
      setGeneratingQR({ ...generatingQR, [inv.id!]: false });
    }
  };

  const copyLink = (inviteUrl: string, id: string) => {
    navigator.clipboard.writeText(inviteUrl);
    setCopiedId(id);
    setTimeout(() => setCopiedId(null), 2000);
  };

  const copyMessage = (handle: string, inviteUrl: string) => {
    const message = `–ø—Ä–∏–≤–µ—Ç! —ç—Ç–æ vnvnc üñ§‚ù§Ô∏è

29‚Äì30 –∞–≤–≥—É—Å—Ç–∞ –æ—Ç–º–µ—á–∞–µ–º –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –∫–ª—É–±–∞ –∏ —Ö–æ—Ç–∏–º –≤–∏–¥–µ—Ç—å —Ç–µ–±—è –Ω–∞ –æ–¥–Ω–æ–π –∏–∑ –Ω–æ—á–µ–π.

—Ç–≤–æ—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ:
${inviteUrl}

–ø—Ä–æ—Ö–æ–¥ –±–µ–∑ –æ—á–µ—Ä–µ–¥–∏, fc –æ—Å—Ç–∞—ë—Ç—Å—è
23:00 ‚Äì 8:00
–∫–æ–Ω—é—à–µ–Ω–Ω–∞—è 2–≤`;

    navigator.clipboard.writeText(message);
    setCopiedId(handle);
    setTimeout(() => setCopiedId(null), 2000);
  };

  const markAsSent = async (id: string) => {
    try {
      await manager.markAsSent(id);
      setInvitations(invitations.map(inv => 
        inv.id === id ? { ...inv, status: 'sent' } : inv
      ));
    } catch (error) {
      console.error('Error marking as sent:', error);
    }
  };

  const deleteInvitation = async (id: string) => {
    if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ?')) {
      return;
    }
    
    try {
      await manager.deleteInvitation(id);
      setInvitations(invitations.filter(inv => inv.id !== id));
      setMessage('–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ');
      setTimeout(() => setMessage(''), 3000);
    } catch (error) {
      console.error('Error deleting invitation:', error);
      setMessage('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è');
    }
  };

  const getStatusBadge = (status: string) => {
    const badges = {
      created: 'bg-gray-600',
      sent: 'bg-blue-600',
      viewed: 'bg-yellow-600',
      redeemed: 'bg-green-600',
      expired: 'bg-red-600',
    };
    return badges[status as keyof typeof badges] || 'bg-gray-600';
  };

  const getStatusText = (status: string) => {
    const statusTexts = {
      created: '–°–æ–∑–¥–∞–Ω–æ',
      sent: '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ',
      viewed: '–ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ',
      redeemed: '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ',
      expired: '–ò—Å—Ç–µ–∫–ª–æ',
    };
    return statusTexts[status as keyof typeof statusTexts] || status;
  };

  const formatExpirationDate = (inv: VNVNCInvitation) => {
    if (!inv.expiresAt) return '–ù–µ—Ç —Å—Ä–æ–∫–∞';
    
    const date = inv.expiresAt.toDate ? inv.expiresAt.toDate() : new Date(inv.expiresAt as any);
    const day = date.getDate();
    const month = date.getMonth() + 1;
    const hours = date.getHours();
    
    if (month === 8) {
      if (day === 30) return '30 –∞–≤–≥ 8:00';
      if (day === 31) return '31 –∞–≤–≥ 8:00';
    }
    return `${day}.${month} ${hours}:00`;
  };

  if (loading) {
    return (
      <div className="min-h-screen bg-black flex items-center justify-center">
        <div className="text-white text-xl loading-dots">–ó–∞–≥—Ä—É–∑–∫–∞</div>
      </div>
    );
  }

  if (!isAuthenticated) {
    return null;
  }

  return (
    <>
      <Head>
        <title>VNVNC - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è–º–∏</title>
      </Head>
      
      <div className="min-h-screen bg-vnvnc-black">
        <AdminHeader />
        
        <div className="container mx-auto px-4 py-8">
          <h1 className="text-3xl font-bold text-white mb-8">–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è–º–∏</h1>

          {/* Create Batch Section */}
          <div className="vnvnc-card mb-8">
            <h2 className="text-xl font-bold text-white mb-4">–°–æ–∑–¥–∞—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è</h2>
            
            <div className="space-y-4">
              {/* Invitation Type Selector */}
              <div>
                <label className="block text-gray-300 mb-2">–¢–∏–ø –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è</label>
                <div className="flex gap-4">
                  <button
                    onClick={() => setInvitationType('link')}
                    className={`flex-1 p-3 rounded border-2 transition-all ${
                      invitationType === 'link'
                        ? 'bg-vnvnc-red border-vnvnc-red text-white'
                        : 'bg-vnvnc-darkgray border-vnvnc-gray text-gray-300 hover:border-vnvnc-red'
                    }`}
                  >
                    <div className="font-bold mb-1">HTML –°—Å—ã–ª–∫–∏</div>
                    <div className="text-sm">–î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ Instagram</div>
                  </button>
                  <button
                    onClick={() => setInvitationType('qr')}
                    className={`flex-1 p-3 rounded border-2 transition-all ${
                      invitationType === 'qr'
                        ? 'bg-vnvnc-red border-vnvnc-red text-white'
                        : 'bg-vnvnc-darkgray border-vnvnc-gray text-gray-300 hover:border-vnvnc-red'
                    }`}
                  >
                    <div className="font-bold mb-1">QR –ö–æ–¥—ã —Å –ª–æ–≥–æ—Ç–∏–ø–æ–º</div>
                    <div className="text-sm">–ó–∞–≥—Ä—É–∑–∫–∞ –≤ ZIP –∞—Ä—Ö–∏–≤–µ</div>
                  </button>
                </div>
              </div>

              <div>
                <label className="block text-gray-300 mb-2">–ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã</label>
                <input
                  type="text"
                  value={batchName}
                  onChange={(e) => setBatchName(e.target.value)}
                  placeholder={invitationType === 'link' ? "–ù–∞–ø—Ä–∏–º–µ—Ä: –ë–ª–æ–≥–µ—Ä—ã Instagram –ê–≤–≥—É—Å—Ç 2025" : "–ù–∞–ø—Ä–∏–º–µ—Ä: VIP QR –ö–æ–¥—ã"}
                  className="vnvnc-input w-full"
                />
              </div>

              <div>
                <label className="block text-gray-300 mb-2">–î–∞—Ç—ã —Å–æ–±—ã—Ç–∏—è</label>
                <select
                  value={eventDate}
                  onChange={(e) => setEventDate(e.target.value as any)}
                  className="vnvnc-input w-full"
                >
                  <option value="both">29-30 –∞–≤–≥—É—Å—Ç–∞ (–æ–±–∞ –¥–Ω—è)</option>
                  <option value="2025-08-29">29 –∞–≤–≥—É—Å—Ç–∞</option>
                  <option value="2025-08-30">30 –∞–≤–≥—É—Å—Ç–∞</option>
                </select>
              </div>

              {invitationType === 'link' ? (
                <div>
                  <label className="block text-gray-300 mb-2">
                    Instagram –∞–∫–∫–∞—É–Ω—Ç—ã (–ø–æ –æ–¥–Ω–æ–º—É –Ω–∞ —Å—Ç—Ä–æ–∫—É)
                  </label>
                  <textarea
                    value={instagramInput}
                    onChange={(e) => setInstagramInput(e.target.value)}
                    placeholder="@username –∏–ª–∏ https://instagram.com/username"
                    rows={10}
                    className="vnvnc-input w-full font-mono text-sm"
                  />
                </div>
              ) : (
                <div>
                  <label className="block text-gray-300 mb-2">
                    –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ QR –∫–æ–¥–æ–≤
                  </label>
                  <input
                    type="number"
                    value={qrCount}
                    onChange={(e) => setQrCount(Math.max(1, Math.min(100, parseInt(e.target.value) || 1)))}
                    min="1"
                    max="100"
                    className="vnvnc-input w-full"
                  />
                  <p className="text-gray-400 text-sm mt-1">–ú–∞–∫—Å–∏–º—É–º 100 –∫–æ–¥–æ–≤ –∑–∞ —Ä–∞–∑</p>
                </div>
              )}

              {qrProgress > 0 && qrProgress < 100 && (
                <div className="bg-vnvnc-darkgray rounded p-3">
                  <div className="text-gray-300 text-sm mb-2">–ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR –∫–æ–¥–æ–≤: {qrProgress}%</div>
                  <div className="bg-vnvnc-gray rounded-full h-2">
                    <div 
                      className="bg-vnvnc-red h-2 rounded-full transition-all"
                      style={{ width: `${qrProgress}%` }}
                    />
                  </div>
                </div>
              )}

              {message && (
                <div className={`p-3 rounded ${message.includes('–û—à–∏–±–∫–∞') ? 'bg-red-900' : 'bg-green-900'} text-white`}>
                  {message}
                </div>
              )}

              <button
                onClick={handleCreateBatch}
                disabled={processing}
                className="vnvnc-button w-full"
              >
                {processing ? (
                  invitationType === 'qr' ? '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR –∫–æ–¥–æ–≤...' : '–°–æ–∑–¥–∞–Ω–∏–µ...'
                ) : (
                  invitationType === 'qr' ? `–°–æ–∑–¥–∞—Ç—å ${qrCount} QR –∫–æ–¥–æ–≤` : '–°–æ–∑–¥–∞—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è'
                )}
              </button>
            </div>
          </div>

          {/* Invitations List */}
          <div className="vnvnc-card">
            <h2 className="text-xl font-bold text-white mb-4">
              –í—Å–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è ({invitations.length})
            </h2>

            <div className="overflow-x-auto">
              <table className="w-full text-sm">
                <thead>
                  <tr className="border-b border-vnvnc-gray">
                    <th className="text-left p-2 text-gray-300">–ü–æ–ª—É—á–∞—Ç–µ–ª—å</th>
                    <th className="text-left p-2 text-gray-300">–ö–æ–¥</th>
                    <th className="text-left p-2 text-gray-300">–¢–∏–ø</th>
                    <th className="text-left p-2 text-gray-300">–°—Ç–∞—Ç—É—Å</th>
                    <th className="text-left p-2 text-gray-300">–î–∞—Ç—ã —Å–æ–±—ã—Ç–∏—è</th>
                    <th className="text-left p-2 text-gray-300">–ò—Å—Ç–µ–∫–∞–µ—Ç</th>
                    <th className="text-left p-2 text-gray-300">–î–µ–π—Å—Ç–≤–∏—è</th>
                  </tr>
                </thead>
                <tbody>
                  {invitations.map((inv) => (
                    <tr key={inv.id} className="border-b border-vnvnc-gray/30 hover:bg-vnvnc-gray/20">
                      <td className="p-2 text-white font-mono">
                        {inv.instagramHandle === 'QR_CODE_USER' ? 'QR Code' : `@${inv.instagramHandle}`}
                      </td>
                      <td className="p-2 text-gray-300 font-mono text-xs">
                        {inv.code}
                      </td>
                      <td className="p-2">
                        <span className={`px-2 py-1 rounded text-xs text-white ${
                          inv.invitationType === 'qr' ? 'bg-purple-600' : 'bg-indigo-600'
                        }`}>
                          {inv.invitationType === 'qr' ? 'QR' : 'Link'}
                        </span>
                      </td>
                      <td className="p-2">
                        <span className={`px-2 py-1 rounded text-xs text-white ${getStatusBadge(inv.status)}`}>
                          {getStatusText(inv.status)}
                        </span>
                      </td>
                      <td className="p-2 text-gray-300 text-xs">
                        {inv.metadata.eventDate === 'both' ? '29-30 –∞–≤–≥' : 
                         inv.metadata.eventDate === '2025-08-29' ? '29 –∞–≤–≥' : '30 –∞–≤–≥'}
                      </td>
                      <td className="p-2 text-gray-300 text-xs">
                        {formatExpirationDate(inv)}
                      </td>
                      <td className="p-2">
                        <div className="flex gap-2">
                          {inv.invitationType === 'qr' ? (
                            <button
                              onClick={() => downloadSingleQR(inv)}
                              disabled={generatingQR[inv.id!]}
                              className="text-purple-500 hover:text-purple-400 text-xs"
                            >
                              {generatingQR[inv.id!] ? '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è...' : '–°–∫–∞—á–∞—Ç—å QR'}
                            </button>
                          ) : (
                            <>
                              <button
                                onClick={() => copyLink(inv.inviteUrl, inv.id!)}
                                className="text-vnvnc-red hover:text-vnvnc-lightred text-xs"
                              >
                                {copiedId === inv.id ? '‚úì' : '–°—Å—ã–ª–∫–∞'}
                              </button>
                              <button
                                onClick={() => copyMessage(inv.instagramHandle, inv.inviteUrl)}
                                className="text-vnvnc-red hover:text-vnvnc-lightred text-xs"
                              >
                                {copiedId === inv.instagramHandle ? '‚úì' : '–°–æ–æ–±—â–µ–Ω–∏–µ'}
                              </button>
                            </>
                          )}
                          {inv.status === 'created' && (
                            <button
                              onClick={() => markAsSent(inv.id!)}
                              className="text-blue-500 hover:text-blue-400 text-xs"
                            >
                              –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
                            </button>
                          )}
                          <button
                            onClick={() => deleteInvitation(inv.id!)}
                            className="text-red-500 hover:text-red-400 text-xs"
                          >
                            –£–¥–∞–ª–∏—Ç—å
                          </button>
                        </div>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          </div>
        </div>
      </div>
    </>
  );
}